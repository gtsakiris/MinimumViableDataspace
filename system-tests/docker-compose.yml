version: "3.9"
services:

  # EDC Connector to simulate a dataspace participant acting as a data provider which is located in EU.
  company1:
    image: ${EDC_IMAGE}
    depends_on:
      - postgresql-edc1
    environment:
      MY_EDC_NAME_KEBAB_CASE: "my-edc"
      MY_EDC_TITLE: "EDC Connector"
      MY_EDC_DESCRIPTION: "sovity Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      MY_EDC_FQDN: "edc"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql-edc1:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://company1:11003/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,X-Api-Key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
    ports:
      - '11001:11001'
      - '11002:11002'
      - '11003:11003'
      - '11004:11004'
      - '11005:5005'

  postgresql-edc1:
    image: docker.io/bitnami/postgresql:11
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54331:5432'
    volumes:
      - 'postgresql:/bitnami/postgresql'


  # Data Dashboard (MVD UI) for participant company1
  company1-datadashboard:
    container_name: company1-datadashboard
    image: ${EDC_UI_IMAGE}
    ports:
      - '11000:8080'
    environment:
      - EDC_UI_ACTIVE_PROFILE=${EDC_UI_ACTIVE_PROFILE}
      - EDC_UI_CONFIG_URL=edc-ui-config
      - EDC_UI_MANAGEMENT_API_URL=http://${HOST_URL:-localhost}:11002/api/management
      - EDC_UI_MANAGEMENT_API_KEY=ApiKeyDefaultValue
      - EDC_UI_CATALOG_URLS=http://company1:11003/api/dsp

      
  # EDC Connector to simulate a dataspace participant acting as a data consumer which is located in EU.
  company2:
    image: ${EDC_IMAGE}
    depends_on:
      - postgresql-edc2
    environment:
      MY_EDC_NAME_KEBAB_CASE: "my-edc2"
      MY_EDC_TITLE: "EDC Connector 2"
      MY_EDC_DESCRIPTION: "sovity Community Edition EDC Connector"
      MY_EDC_CURATOR_URL: "https://example.com"
      MY_EDC_CURATOR_NAME: "Example GmbH"
      MY_EDC_MAINTAINER_URL: "https://sovity.de"
      MY_EDC_MAINTAINER_NAME: "sovity GmbH"

      MY_EDC_FQDN: "edc2"
      EDC_API_AUTH_KEY: ApiKeyDefaultValue

      MY_EDC_JDBC_URL: jdbc:postgresql://postgresql-edc2:5432/edc
      MY_EDC_JDBC_USER: edc
      MY_EDC_JDBC_PASSWORD: edc

      # docker compose local dev environment overrides (don't use with non-dev images)
      MY_EDC_PROTOCOL: "http://"
      EDC_DSP_CALLBACK_ADDRESS: http://company2:11003/api/dsp
      EDC_WEB_REST_CORS_ENABLED: 'true'
      EDC_WEB_REST_CORS_HEADERS: 'origin,content-type,accept,authorization,X-Api-Key'
      EDC_WEB_REST_CORS_ORIGINS: '*'
    ports:
      - '22001:11001'
      - '22002:11002'
      - '22003:11003'
      - '22004:11004'
      - '22005:5005'

  postgresql-edc2:
    image: docker.io/bitnami/postgresql:11
    restart: always
    environment:
      POSTGRESQL_USERNAME: edc
      POSTGRESQL_PASSWORD: edc
      POSTGRESQL_DATABASE: edc
    ports:
      - '54332:5432'
    volumes:
      - 'postgresql2:/bitnami/postgresql'


  # EDC Connector to simulate a dataspace participant acting as a consumer which is located in US.
  company3:
    container_name: company3
    build:
      context: ../launchers/connector
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007"
    environment:
      EDC_DSP_CALLBACK_ADDRESS: http://company3:8282/api/dsp
      EDC_CONNECTOR_NAME: company3
      EDC_PARTICIPANT_ID: did:web:did-server:company3

      EDC_BLOBSTORE_ENDPOINT_TEMPLATE: "http://azurite:10000/%s"
      EDC_IDENTITY_DID_URL: did:web:did-server:company3
      EDC_VAULT: /resources/vault/company3/company3-vault.properties
      EDC_KEYSTORE: /resources/vault/company3/company3-keystore.jks
      EDC_SELF_DESCRIPTION_DOCUMENT_PATH: /resources/self-description/company3/sdd.json
      EDC_KEYSTORE_PASSWORD: test123
      EDC_API_AUTH_KEY: ApiKeyDefaultValue
      EDC_IAM_DID_WEB_USE_HTTPS: "false"
      EDC_CATALOG_CACHE_EXECUTION_DELAY_SECONDS: 5
      EDC_CATALOG_CACHE_EXECUTION_PERIOD_SECONDS: 5
      EDC_CATALOG_CACHE_PARTITION_NUM_CRAWLERS: 5
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: http://company3:8383/api/control/token
      REGISTRATION_SERVICE_API_URL: http://registration-service:8184/api/authority
      EDC_WEB_REST_CORS_ENABLED: "true"
      EDC_WEB_REST_CORS_HEADERS: "origin,content-type,accept,authorization,x-api-key"
    depends_on:
      - did-server
      - azurite
      - registration-service
    ports:
      - "9193:9191"
      - "8183:8181"
      - "5007:5007"
      - "7173:7171"
    volumes:
      - ./resources:/resources

  # Usages postman collections for initial data seeding to connectors.
  newman:
    container_name: newman
    image: postman/newman:ubuntu
    entrypoint: /bin/bash
    command: deployment/seed-data.sh
    volumes:
      - ../deployment/:/deployment
    working_dir: /
    environment:
      API_KEY: ApiKeyDefaultValue
      EDC_HOST: company1:company2:company3
      ASSETS_STORAGE_ACCOUNT: company1assets:company2assets:company3assets
      PARTICIPANT_ID: company1:company2:company3
    depends_on:
      company1:
        condition: service_healthy
      company2:
        condition: service_healthy
      company3:
        condition: service_healthy

  # A nginx based HTTP server to serve dataspace participants DIDs.
  did-server:
    container_name: did-server
    image: nginx
    volumes:
      - ./resources/webdid:/usr/share/nginx/html
    ports:
      - "7070:80"

  # Azure blob storage simulator.
  azurite:
    container_name: azurite
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - 10000:10000
    environment:
      AZURITE_ACCOUNTS: company1assets:key1;company2assets:key2;company3assets:key3

  # Dataspace registration service authority.
  registration-service:
    container_name: registration-service
    build:
      #e.g. /home/user/RegistrationService/launcher
      context: ../launchers/registrationservice
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008"
    environment:
      JWT_AUDIENCE: http://registration-service:8184/api/authority
      EDC_IAM_DID_WEB_USE_HTTPS: "false"
      EDC_CONNECTOR_NAME: registration-service
      EDC_IDENTITY_DID_URL: did:web:did-server:registration-service
      EDC_SELF_DESCRIPTION_DOCUMENT_PATH: /resources/self-description/registration-service/sdd.json
      EDC_VAULT: /resources/vault/registration-service/registration-service-vault.properties
      EDC_KEYSTORE: /resources/vault/registration-service/registration-service-keystore.jks
      EDC_KEYSTORE_PASSWORD: test123
      EDC_ERROR_RESPONSE_VERBOSE: "true"
    ports:
      - "8184:8184"
      - "8185:8181"
      - "5008:5008"
      - "7174:7171"
    volumes:
      - ./resources:/resources

  # cli-tools to help setup MVD environment e.g. registering participant to authority.
  cli-tools:
    container_name: cli-tools
    build:
      context: ./resources/cli-tools
    volumes:
      - ./resources:/resources
      - ../resources:/common-resources
    depends_on:
      company1:
        condition: service_healthy
      company2:
        condition: service_healthy
      company3:
        condition: service_healthy
      registration-service:
        condition: service_healthy

      # Data Dashboard (MVD UI) for participant company2
  company2-datadashboard:
    image: ${EDC_UI_IMAGE}
    ports:
      - '22000:8080'
    environment:
      - EDC_UI_ACTIVE_PROFILE=${EDC_UI_ACTIVE_PROFILE}
      - EDC_UI_CONFIG_URL=edc-ui-config
      - EDC_UI_MANAGEMENT_API_URL=http://${HOST_URL:-localhost}:22002/api/management
      - EDC_UI_MANAGEMENT_API_KEY=ApiKeyDefaultValue
      - EDC_UI_CATALOG_URLS=http://company1:11003/api/dsp

  # Data Dashboard (MVD UI) for participant company3
  company3-datadashboard:
    container_name: company3-datadashboard
    build:
      context: ${MVD_UI_PATH}
    volumes:
      - ./resources/appconfig/company3:/usr/share/nginx/html/assets/config
    depends_on:
      company3:
        condition: service_healthy
    ports:
      - "7082:80"

volumes:
  postgresql:
    driver: local
  postgresql2:
    driver: local